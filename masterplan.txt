Checklist:
	Core checklist
	Done C1. Admin login and user login
		Done C1.1. A login/register form with fields like username, password, etc. for sponsor, influencer and admin login.
		Done C1.2. The application should have only one admin identified by its role.
		Done C1.3. Use either Flask security or JWT based Token based authentication to implement role based access control.
		Done C1.4. The app must have a suitable model to store and differentiate all the types of users of the app.
	Done C2. Admin dashboard - for the Admin
		Done C2.1. The admin should be automatically added whenever a new database is created.
		Done C2.2. Every new sponsor signup should be approved by the admin.
			Done C2.2.1. The request should automatically go to the admin's dashboard for approval.
		Done C2.3. The application must have an admin dashboard which displays all the relevant statistics of the application, eg active users, campaigns(public/private), ad requests and their status, flagged sponsors/influencers, etc.
	Done C3. Campaign management - for the Sponsors
		Done C3.1. Create a new campaign and categorize into different niches.
		Done C3.2. Update an existing campaign - eg start_date, end_date, budget and/or other fields.
		Done C3.3. Delete an existing campaign.
	Done C4. Ad request management - for the Sponsors.
		Done C4.1. Create ad requests based on the goals on the campaign.
		Done C4.2. Edit an existing ad request - eg influencer_id, requirements, payment_amount, status.
		Done C4.3. Delete an existing ad request.
	C5. Search for influencers, public campaigns.
		Done C5.1. The sponsors should be able to search for relevant influencers based on their niche, reach, followers, etc.
		C5.2. The influencers should be able to search for public campaigns based on their niche, relevance, etc.
	C6. Take action on a particular ad request - for the Influencers.
		C6.1. Ability to view all the ad requests from all the campaigns.
		C6.2. Ability to accept/reject a particular ad request.
		C6.3. Ability to negotiate the payment_amount for a particular ad.
	C7. Backend jobs.
		C7.1. Scheduled job - Daily reminders - The application should send daily reminders to influencers on g-chat using Google Chat Webhooks or SMS or mail. 
		C7.2. Scheduled job - Monthly activity reports - Devise a monthly report for the sponsors created using HTML and sent via email.
		C7.3. User triggered async job - Export as CSV - Devise a CSV format details for the campaigns(public/private) created by the sponsor.
	C8. Performance and caching.
		C8.1. Add caching where required to increase the performance.
		C8.2. Add cache expiry.
		C8.3. API performance. 
	Recommended checklist:
	R1. Well designed PDF reports for Monthly activity report.
	R2. External APIs/libraries for creating charts, eg ChartJS.
	R3. Single responsive UI for both Mobile and Desktop.
		R3.1. Unified UI that works across devices.
		R3.2. Add to desktop feature.
	R4. Implementing frontend validation on all the form fields using HTML5 form validation on Javascript.
	R5. Implementing backend validation within your APIs.
	Optional checklist:
	O1. Provide styling and aesthetics to your application by creating a beautiful and responsive frontend using simple CSS or Bootstrap.
	O2. Incorporate a proper login system to prevent unauthorized access to the app using flask extensions like flask_login, flask_security, etc.
	O3. Implement a dummy payment portal(just a view taking payment details from sponsors for an ad request)
	O4. Any additional feature you feel is appropriate for the application.

MASTERPLAN NEW AND IMPROVED
Main idea: Create API first, then create frontend based on Vue and Jinja2 templates with fetch used to make API calls.

Api requirements
	Done 1. Login.
		Done 1.1. Accepts a post request with fields username and password.
		Done 1.2. Validates user.
		Done 1.3. Logs the user in.
		Done 1.4. Returns authentication token or error.
	Done 2. Register.
		Done 2.1. Accepts a post request with necessary fields for influencer and sponsor.
		Done 2.2. Validates whether or not user exists.
		Done 2.3. Registers user.
		Done 2.4. Returns success or error.
	Done 3. Admin approve sponsor.
		Done 3.1. Accepts post request from admin, with user_id of sponsor to be approved.
		Done 3.2. Approves sponsor.
		Done 3.3. Returns success or error.
	4. Admin stats.
		4.1. Accepts get request from admin, which requires authentication token.
		4.2. Returns stats as json or error.
	5. Campaign creation for sponsor.
		5.1. Accepts post request from sponsor, which requires authentication token.
		5.2. Validates that post request contains necessary details, and that campaign doesn't exist.
		5.3. Creates campaign in database.
		5.4. Returns success or error.
	6. Campaign updation for sponsor.
		6.1. Accepts post request from sponsor, which requires authentication token.
		6.2. Post request must contain details of updated campaign.
		6.3. Makes changes to campaign in database.
		6.4. Returns success or error.
	7. Campaign deletion for sponsor.
		7.1. Accepts post request from sponsor, which requires authentication token.
		7.2. Deletes the campaign from the database.
		7.3. Returns success or error.
	8. Ad request creation for sponsor.
		8.1. Accepts post request from sponsor, which requires authentication token.
		8.2. Creates ad request for selected campaign and influencer.
		8.3. Returns success or error.
	9. Ad request updation for sponsor.
		9.1. Accepts post request from sponsor, which requires authentication token.
		9.2. Updates details for ad request in dataase.
		9.3. Returns success or error.
	10. Ad request deletion for sponsor.
		10.1. Accepts post request from sponsor, which requires authentication token.
		10.2. Deletes ad request from database.
		10.3. Returns success or error.
	11. Search for influencer for sponsor.
		11.1. Accepts post request from sponsor, which requires authentication token.
		11.2. Executes search in database.
		11.3. Returns results or error.
	12. Search for public campaigns for influencer.
		12.1. Accepts post request from influencer, which requires authentication token.
		12.2. Executes search in database.
		12.3. Returns results or error.
	13. Take action on ad request for influencer.
		13.1. Accepts post request from influencer, which requires authentication token.
		13.2. Makes change to ad request in database.
		13.3. Returns success or error.
	14. Messaging.